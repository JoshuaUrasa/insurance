<?xml version="1.0" encoding="UTF-8"?>
<api context="/insurance/1.0.0/policy_approval" name="ApprovePendingPolicyApi"
    xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST" uri-template="/">
        <inSequence>
            <log category="INFO" logMessageID="false" logFullPayload="false">
                <message>................................................................................................. Request Received for Approve Pending..................................................</message>
            </log>

            <property name="RequestId" expression="get-property('transport', 'RequestId')" />


            <filter xpath="not(get-property('RequestId'))">
                <then>
                    <property name="HTTP_SC" value="400" scope="axis2" />
                    <property name="messageType" value="application/json" scope="axis2" />
                    <payloadFactory media-type="json" template-type="default">
                        <format>{ "ResponseBody": { "Status": "Error", "RequestId": null,
                            "ErrorMessage": "RequestId header required" } }</format>
                    </payloadFactory>
                    <respond />
                </then>
            </filter>


            <filter xpath="string-length(get-property('RequestId')) != 5">
                <then>
                    <property name="HTTP_SC" value="400" scope="axis2" />
                    <property name="messageType" value="application/json" scope="axis2" />
                    <payloadFactory media-type="json" template-type="default">
                        <format>{ "ResponseBody": { "Status": "Error", "RequestId":
                            "${properties.synapse.RequestId}", "ErrorMessage": "RequestId must be exactly 5 digits" } }</format>
                    </payloadFactory>
                    <respond />
                </then>
            </filter>

            <property name="PolicyId" expression="json-eval($.PolicyId)" />
            <property name="ManagerId" expression="json-eval($.ManagerId)" />
            <property name="ApprovalStatus" expression="json-eval($.ApprovalStatus)" />
            <property name="Comments" expression="json-eval($.Comments)" />


            <filter xpath="fn:string-length(get-property('PolicyId')) = 0">
                <then>
                   
                    <payloadFactory media-type="json">
                        <format> {"ResponseHeader": {"status":"error","RequestId":"${properties.synapse.RequestId}","ErrorMessage": "PolicyId is mandatory"}} </format>
                    </payloadFactory>
                    <property name="HTTP_SC" value="400" scope="axis2" />
                    <respond />
                </then>
            </filter>


            <filter xpath="fn:string-length(get-property('ManagerId')) = 0">
                <then>
                    <payloadFactory media-type="json">
                        <format> {"ResponseHeader": {"status":"error","RequestId":"${properties.synapse.RequestId}","ErrorMessage": "ManagerId is mandatory"}} </format>
                    </payloadFactory>
                    <property name="HTTP_SC" value="400" scope="axis2" />
                    <respond />
                </then>
            </filter>

            
            <filter xpath="fn:string-length(get-property('ApprovalStatus')) = 0">
                <then>
                    <payloadFactory media-type="json">
                        <format> {"ResponseHeader": {"status":"error","RequestId":"${properties.synapse.RequestId}","ErrorMessage": "ApprovalStatus is mandatory"}} </format>
                    </payloadFactory>
                    <property name="HTTP_SC" value="400" scope="axis2" />
                    <respond />
                </then>
            </filter>

            
            <filter
                xpath="get-property('ApprovalStatus') != 'APPROVED' and get-property('ApprovalStatus') != 'REJECTED'">
                <then>
                    <payloadFactory media-type="json">
                        <format> {"ResponseHeader": {"status":"error","RequestId":"${properties.synapse.RequestId}","ErrorMessage": "ApprovalStatus must be either APPROVED or REJECTED"}} </format>
                    </payloadFactory>
                    <property name="HTTP_SC" value="400" scope="axis2" />
                    <respond />
                </then>
            </filter>


            <property name="uri.var.policy_id" scope="default" type="STRING"
                expression="get-property('PolicyId')" />

            <payloadFactory media-type="json" template-type="default">
                <format> { "manager_id": "${properties.synapse.ManagerId}", "approval_status":
                    "${properties.synapse.ApprovalStatus}", "comments":
                    "${properties.synapse.Comments}" } </format>
            </payloadFactory>



    <header name="x-api-key" expression="wso2:vault-lookup('x-api-key')" scope="transport"/>

            <call>
                <endpoint key="ApproveInsuranceEndpoint" />
            </call>

           <property name="policy_id" expression="json-eval($.policy_id)" />
           <property name="approval_status" expression="json-eval($.approval.approval_status)" />
           <property name="manager_name" expression="json-eval($.approval.manager_name)" />
           <property name="approval_comments" expression="json-eval($.approval.comments)" />
           <property name="approved_at" expression="json-eval($.approval.approved_at)" />
           <property name="policy_status" expression="json-eval($.policy_status)" />
        <property name="description" expression="json-eval($.message)" />

            <payloadFactory media-type="json" template-type="default">
                <format>
                    {"MESSAGE_TYPE":"POLICY_APPROVAL","policy_id":"${properties.synapse.policy_id}","approval_status":"${properties.synapse.approval_status}","approved_at":"${properties.synapse.approved_at}"}
                    </format>
            </payloadFactory>
            <store messageStore="INS_DSS_QUEUE" sequence="MessageRouterSequence" />


        
          
            <property name="HTTP_SC" value="200" scope="axis2" />

    
        <payloadFactory media-type="json" template-type="default">
    <format>{
        "ResponseHeader": {
            "Status": "OK",
            "RequestId": "${properties.synapse.RequestId}"
        },
        "ResponseBody": {
            "PolicyId": "${properties.synapse.policy_id}",
            "Approval": {
                "ManagerName": "${properties.synapse.manager_name}",
                "ApprovalStatus": "${properties.synapse.approval_status}",
                "ApprovalComments": "${properties.synapse.approval_comments}",
                "ApprovedAt": "${properties.synapse.approved_at}"
            },
            "PolicyStatus": "${properties.synapse.policy_status}",
            "Description": "${properties.synapse.description}"
        }
    }</format>
</payloadFactory>
            <respond />
        </inSequence>
        <faultSequence>
            <log category="ERROR">
                <message>Error occurred while processing policy approval request</message>
            </log>
            <payloadFactory media-type="json">
                <format> {"ResponseHeader":{"Status": "Error","RequestId":"${properties.synapse.RequestId}","ErrorMessage":"Connection Error with the Mock Backend"}
} </format>
            </payloadFactory>
            <property name="HTTP_SC" value="500" scope="axis2" />
            <respond />
        </faultSequence>
    </resource>
</api>