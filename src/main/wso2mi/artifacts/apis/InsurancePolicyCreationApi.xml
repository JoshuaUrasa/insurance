<?xml version="1.0" encoding="UTF-8"?>
<api context="/insurance/1.0.0/policy_creation" name="InsurancePolicyCreationApi"
    xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST" uri-template="/insurance/1.0.0/policy_creation">
        <inSequence>
            <log category="INFO" logMessageID="false">
                <message>............................................Insurance Policy Creation API request received........................................</message>
            </log>
            
            <!-- <script language="js">
                <![CDATA[
                    try {
                        var payload = mc.getPayloadJSON();
                        mc.setProperty("JSON_VALID", "true");
                    } catch (e) {
                        mc.setProperty("JSON_VALID", "false");
                        mc.setProperty("ERROR_MESSAGE", "Existing json payload is malformed: " + e.message);
                        mc.setProperty("ERROR_CODE", "MALFORMED_JSON");
                        mc.setProperty("ERROR_FIELD", "unknown");
                    }
                ]]>
            </script> -->
            <filter xpath="get-property('JSON_VALID') = 'false'">
                <then>
                    <log category="ERROR" logMessageID="false">
                        <message>Malformed JSON detected</message>
                        <property name="ERROR_MESSAGE" expression="$ctx:ERROR_MESSAGE"/>
                    </log>
                    <payloadFactory media-type="json">
                        <format>{
                            "ResponseHeader": {
                                "status": "Error",
                                "RequestId": "${properties.synapse.RequestId}",
                                "ErrorMessage": "${properties.synapse.ERROR_MESSAGE}",
                                "ErrorCode": "${properties.synapse.ERROR_CODE}",
                                "FieldName": "${properties.synapse.ERROR_FIELD}"
                            }
                        }</format>
                    </payloadFactory>
                    <property name="HTTP_SC" value="400" scope="axis2"/>
                    <respond/>
                </then>
            </filter>


            <property name="RequestId" expression="get-property('transport', 'RequestId')" />

            
            <filter xpath="not(get-property('RequestId'))">
                <then>
                    <log category="ERROR" logMessageID="false" logFullPayload="false">
                        <message>Missing RequestId header</message>
                    </log>
                    <property name="HTTP_SC" value="400" scope="axis2" />
                    <property name="messageType" value="application/json" scope="axis2" />
                    <payloadFactory media-type="json" template-type="default">
                        <format>{
                            "ResponseBody": { "Status": "Error", "RequestId": null, "ErrorMessage":
                            "RequestId header is required" } }</format>
                    </payloadFactory>
                    <respond />
                </then>
            </filter>

            
            <filter xpath="string-length(get-property('RequestId')) != 5">
                <then>
                    <log category="ERROR" logMessageID="false" logFullPayload="false">
                        <message>Invalid RequestId length: ${properties.synapse.RequestId}</message>
                    </log>
                    <property name="HTTP_SC" value="400" scope="axis2" />
                    <property name="messageType" value="application/json" scope="axis2" />
                    <payloadFactory media-type="json" template-type="default">
                        <format>{
                            "ResponseBody": { "Status": "Error", "RequestId":
                            "${properties.synapse.RequestId}", "ErrorMessage": "RequestId must be
                            exactly 5 digits" } }</format>
                    </payloadFactory>
                    <respond />
                </then>
            </filter>


        
<filter source="json-eval($.PolicyHolder.ContactInfo.Phone)" regex="^\+?[1-9]\d{6,14}$|^$|^null$">
    <then>

    </then>
    <else>
        <payloadFactory media-type="json">
            <format>{
                "ResponseHeader": {
                    "status": "Error",
                    "RequestId": "${properties.synapse.RequestId}",
                    "ErrorMessage": "Phone must be a valid phone number with country code",
                    
                }
            }</format>
        </payloadFactory>
        <property name="HTTP_SC" value="400" scope="axis2"/>
        <respond/>
    </else>
</filter>

<filter source="json-eval($.PolicyHolder.ContactInfo.Email)" regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$|^$|^null$">
        <then>
            
        </then>
        <else>
            <payloadFactory media-type="json">
                <format>{
                    "ResponseHeader": {
                        "status": "Error",
                        "RequestId": "${properties.synapse.RequestId}",
                        "ErrorMessage": "Email must be a valid email address"
                    }
                }</format>
            </payloadFactory>
            <property name="HTTP_SC" value="400" scope="axis2"/>
            <respond/>
        </else>
    </filter>

            <filter source="json-eval($.PolicyHolder.DateOfBirth)" regex="^\d{4}-\d{2}-\d{2}$">
    <then>
        
    </then>
    <else>
        <payloadFactory media-type="json">
            <format>{"ResponseHeader": {"status": "Error","RequestId": "${properties.synapse.RequestId}","ErrorMessage": "Date of birth is mandatory and must be in YYYY-MM-DD format" }}</format>
        </payloadFactory>
        <property name="HTTP_SC" value="400" scope="axis2"/>
        <respond/>
    </else>
</filter>



    <filter source="json-eval($.PolicyDetails.PolicyType)" regex=".+">
        <then>
    
        </then>
        <else>
            <payloadFactory media-type="json">
                <format>{
                    "ResponseHeader": {
                        "status": "Error",
                        "RequestId": "${properties.synapse.RequestId}",
                        "ErrorMessage": "Policy type is mandatory",
                        "ErrorCode": "MISSING_POLICY_TYPE",
                        "FieldName": "PolicyDetails.PolicyType"
                    }
                }</format>
            </payloadFactory>
            <property name="HTTP_SC" value="400" scope="axis2"/>
            <respond/>
        </else>
    </filter>
    
   <filter source="json-eval($.PolicyDetails.PrimaryCoverageAmount)" regex="^[0-9]+$">
        <then>
        </then>
        <else>
            <payloadFactory media-type="json">
                <format>{
                    "ResponseHeader": {
                        "status": "Error",
                        "RequestId": "${properties.synapse.RequestId}",
                        "ErrorMessage": "Primary coverage amount is mandatory and must be an integer",
                        "ErrorCode": "MISSING_PRIMARY_COVERAGE_AMOUNT",
                        "FieldName": "PolicyDetails.PrimaryCoverageAmount"
                    }
                }</format>
            </payloadFactory>
            <property name="HTTP_SC" value="400" scope="axis2"/>
            <respond/>
        </else>
    </filter>
   <filter source="json-eval($.PolicyDetails.PremiumAmount)" regex="^[0-9]+$">
        <then>
        </then>
        <else>
            <payloadFactory media-type="json">
                <format>{
                    "ResponseHeader": {
                        "status": "Error",
                        "RequestId": "${properties.synapse.RequestId}",
                        "ErrorMessage": "Premium amount is mandatory and must be an integer",
                        "ErrorCode": "MISSING_PREMIUM_AMOUNT",
                        "FieldName": "PolicyDetails.PremiumAmount"
                    }
                }</format>
            </payloadFactory>
            <property name="HTTP_SC" value="400" scope="axis2"/>
            <respond/>
        </else>
    </filter>
    
    <filter source="json-eval($.PolicyDetails.StartDate)" regex="^\d{4}-\d{2}-\d{2}$">
        <then>
            
        </then>
        <else>
            <payloadFactory media-type="json">
                <format>{
                    "ResponseHeader": {
                        "status": "Error",
                        "RequestId": "${properties.synapse.RequestId}",
                        "ErrorMessage": "Start date is mandatory and must be in YYYY-MM-DD format",
                        
                    }
                }</format>
            </payloadFactory>
            <property name="HTTP_SC" value="400" scope="axis2"/>
            <respond/>
        </else>
    </filter>

    <filter source="json-eval($.PolicyDetails.EndDate)" regex="^\d{4}-\d{2}-\d{2}$">
        <then>
        </then>
        <else>
            <payloadFactory media-type="json">
                <format>{
                    "ResponseHeader": {
                        "status": "Error",
                        "RequestId": "${properties.synapse.RequestId}",
                        "ErrorMessage": "End date is mandatory and must be in YYYY-MM-DD format",
                        "ErrorCode": "MISSING_END_DATE",
                        "FieldName": "PolicyDetails.EndDate"
                    }
                }</format>
            </payloadFactory>
            <property name="HTTP_SC" value="400" scope="axis2"/>
            <respond/>
        </else>
    </filter>
    
    <filter source="json-eval($.PolicyDetails.PaymentFrequency)" regex="^(Monthly|Weekly|Yearly)$">
        <then>
            
        </then>
        <else>
            <payloadFactory media-type="json">
                <format>{
                    "ResponseHeader": {
                        "status": "Error",
                        "RequestId": "${properties.synapse.RequestId}",
                        "ErrorMessage": "Payment frequency is mandatory and must be 'Monthly', 'Weekly', or 'Yearly'",
                        "ErrorCode": "INVALID_PAYMENT_FREQUENCY",
                        "FieldName": "PolicyDetails.PaymentFrequency"
                    }
                }</format>
            </payloadFactory>
            <property name="HTTP_SC" value="400" scope="axis2"/>
            <respond/>
        </else>
    </filter>
            
            <validate source="json-eval($)" cache-schema="true">
    <schema key="resources:json/RequestValidationSchema.json" />
    <on-fail>
        
        <sequence key="ParseValidationErrorSequence" />
        <respond />
    </on-fail>
</validate>
            <variable name="FIRST_NAME" type="STRING" expression="${payload.PolicyHolder.FirstName}" />
            <variable name="LAST_NAME" type="STRING" expression="${payload.PolicyHolder.LastName}" />
            <variable name="DOB" type="STRING" expression="${payload.PolicyHolder.DateOfBirth}" />
            <variable name="EMAIL" type="STRING"
                expression="${payload.PolicyHolder.ContactInfo.Email}" />
            <variable name="MOBILE" type="STRING"
                expression="${payload.PolicyHolder.ContactInfo.Phone}" />
            <variable name="PolicyDetailsPolicyType" type="STRING"
                expression="${payload.PolicyDetails.PolicyType}" />
            <variable name="PAYMENT_METHOD" type="STRING"
                expression="${payload.PaymentInfo.PaymentMethod}" />
            <propertyGroup>
                <property name="gender" scope="default" type="STRING"
                    expression="${payload.PolicyHolder.Gender}" action="set" />
                <property name="street" scope="default" type="STRING"
                    expression="${payload.PolicyHolder.ContactInfo.Address.Street}" action="set" />
                <property name="city" scope="default" type="STRING"
                    expression="${payload.PolicyHolder.ContactInfo.Address.City}" action="set" />
                <property name="state" scope="default" type="STRING"
                    expression="${payload.PolicyHolder.ContactInfo.Address.State}" action="set" />
                <property name="zip_code" scope="default" type="STRING"
                    expression="${payload.PolicyHolder.ContactInfo.Address.ZipCode}" action="set" />
                <property name="country" scope="default" type="STRING"
                    expression="${payload.PolicyHolder.ContactInfo.Address.Country}" action="set" />
                <property name="primary_coverage_amount" scope="default" type="INTEGER"
                    expression="${payload.PolicyDetails.PrimaryCoverageAmount}" action="set" />
                <property name="premium_amount" scope="default" type="INTEGER"
                    expression="${payload.PolicyDetails.PremiumAmount}" action="set" />
                <property name="start_date" scope="default" type="STRING"
                    expression="${payload.PolicyDetails.StartDate}" action="set" />
                <property name="end_date" scope="default" type="STRING"
                    expression="${payload.PolicyDetails.EndDate}" action="set" />
                <property name="payment_frequency" scope="default" type="STRING"
                    expression="${payload.PolicyDetails.PaymentFrequency}" action="set" />
                <property name="b_firstname" scope="default" type="STRING"
                    expression="${payload.Beneficiaries[0].FirstName}" action="set" />
                <property name="b_lastname" scope="default" type="STRING"
                    expression="${payload.Beneficiaries[0].LastName}" action="set" />
                <property name="b_date_of_birth" scope="default" type="STRING"
                    expression="${payload.Beneficiaries[0].DateOfBirth}" action="set" />
                <property name="b_percentage_share" scope="default" type="STRING"
                    expression="${payload.Beneficiaries[0].PercentageShare}" action="set" />
                <property name="card_number" scope="default" type="STRING"
                    expression="${payload.PaymentInfo.CardNumber}" action="set" />
                <property name="card_exp_date" scope="default" type="STRING"
                    expression="${payload.PaymentInfo.CardExpiryDate}" action="set" />
                <property name="card_cvv" scope="default" type="STRING"
                    expression="${payload.PaymentInfo.CardCvv}" action="set" />
            </propertyGroup>

            <header name="x-api-key" expression="wso2:vault-lookup('x-api-key')" scope="transport" />
            <call>
                <endpoint key="ListInsurancePolicyEndpoint" />
            </call>
            <property name="HTTP_STATUS" expression="$axis2:HTTP_SC" scope="default" type="STRING" />
            <filter xpath="$ctx:HTTP_STATUS != '200'">
                <then>
                    <payloadFactory media-type="json">
                        <format>{"ResponseHeader":
                            {"Status": "Error", "RequestId": "$1", "ErrorMessage": "List Insurance
                            Policy Types API failed with status: $2"}}</format>
                        <args>
                            <arg expression="$ctx:RequestId" evaluator="xml" />
                            <arg expression="$ctx:HTTP_STATUS" evaluator="xml" />
                        </args>
                    </payloadFactory>
                    <property name="HTTP_SC" value="500" scope="axis2" />
                    <respond />
                </then>
                <else>
                    <property name="policyTypes" expression="json-eval($.policy_types)"
                        scope="default" />
                </else>
            </filter>


            <iterate expression="json-eval($.policy_types)" continueParent="true" sequential="true">
                <target>
                    <sequence>
                        <variable name="currentPolicyId" type="STRING"
                            expression="json-eval($.policy_type_id)" />
                        <variable name="currentPolicyName" type="STRING"
                            expression="json-eval($.name)" />

                        <filter xpath="${vars.PolicyDetailsPolicyType == vars.currentPolicyId}">
                            <then>


                                <payloadFactory media-type="json" template-type="default">
                                    <format> { "insertInsurancePolicy": {
                                        "FIRST_NAME":"${vars.FIRST_NAME}",
                                        "LAST_NAME":"${vars.LAST_NAME}", "DOB": "${vars.DOB}",
                                        "EMAIL":"${vars.EMAIL}", "MOBILE": "${vars.MOBILE}",
                                        "POLICY_TYPE_ID":"${vars.currentPolicyId}",
                                        "PAYMENT_METHOD":"${vars.PAYMENT_METHOD}" } } </format>
                                </payloadFactory>

                                <payloadFactory media-type="xml" template-type="default">
                                    <format>
                                        <insertInsurancePolicy xmlns="http://ws.apache.org/ns/data">
                                            <FIRST_NAME>
                                        $1</FIRST_NAME>
                                            <LAST_NAME>$2</LAST_NAME>
                                            <DOB>$3</DOB>
                                            <EMAIL>$4</EMAIL>
                                            <MOBILE>$5</MOBILE>
                                            <POLICY_TYPE_ID>$6</POLICY_TYPE_ID>
                                            <PAYMENT_METHOD>
                                        $7</PAYMENT_METHOD>
                                        </insertInsurancePolicy>
                                    </format>
                                    <args>
                                        <arg evaluator="json"
                                            expression="$.insertInsurancePolicy.FIRST_NAME" />
                                        <arg evaluator="json"
                                            expression="$.insertInsurancePolicy.LAST_NAME" />
                                        <arg evaluator="json"
                                            expression="$.insertInsurancePolicy.DOB" />
                                        <arg evaluator="json"
                                            expression="$.insertInsurancePolicy.EMAIL" />
                                        <arg evaluator="json"
                                            expression="$.insertInsurancePolicy.MOBILE" />
                                        <arg evaluator="json"
                                            expression="$.insertInsurancePolicy.POLICY_TYPE_ID" />
                                        <arg evaluator="json"
                                            expression="$.insertInsurancePolicy.PAYMENT_METHOD" />
                                    </args>
                                </payloadFactory>

                                <property name="firstname" scope="default" type="STRING"
                                    expression="${vars.FIRST_NAME}" />
                                <property name="LAST_NAME" scope="default" type="STRING"
                                    expression="${vars.LAST_NAME}" />
                                <property name="DOB" scope="default" type="STRING"
                                    expression="${vars.DOB}" />
                                <property name="EMAIL" scope="default" type="STRING"
                                    expression="${vars.EMAIL}" />
                                <property name="MOBILE" scope="default" type="STRING"
                                    expression="${vars.MOBILE}" />
                                <property name="POLICY_TYPE_ID" scope="default" type="STRING"
                                    expression="${vars.currentPolicyId}" />
                                <property name="PAYMENT_METHOD" scope="default" type="STRING"
                                    expression="${vars.PAYMENT_METHOD}" />


                                <dataServiceCall serviceName="InsuranceCreationService">
                                    <operations type="single">
                                        <operation name="insertInsurancePolicy">
                                            <param name="FIRST_NAME" expression="$ctx:firstname"
                                                evaluator="xml" />
                                            <param name="LAST_NAME" expression="$ctx:LAST_NAME"
                                                evaluator="xml" />
                                            <param name="DOB" expression="$ctx:DOB" evaluator="xml" />
                                            <param name="EMAIL" expression="$ctx:EMAIL"
                                                evaluator="xml" />
                                            <param name="MOBILE" expression="$ctx:MOBILE"
                                                evaluator="xml" />
                                            <param name="POLICY_TYPE_ID"
                                                expression="$ctx:POLICY_TYPE_ID" evaluator="xml" />
                                            <param name="PAYMENT_METHOD"
                                                expression="$ctx:PAYMENT_METHOD" evaluator="xml" />
                                        </operation>
                                    </operations>
                                    <source type="inline" />
                                    <target type="property" name="insertResponse" />
                                </dataServiceCall>

                                <property name="DID"
                                    expression="$ctx:insertResponse//*[local-name()='DID']/text()"
                                    scope="operation"
                                    type="STRING" />

                                <filter xpath="string-length($ctx:DID) > 0">
                                    <then>
                                        <log category="INFO" logMessageID="false">
                                            <property name="SUCCESS_MESSAGE"
                                                value="DID successfully extracted" />
                                            <property name="DID_VALUE" expression="$ctx:DID" />
                                        </log>
                                    </then>
                                    <else>
                                        <log category="ERROR" logMessageID="false">
                                            <property name="ERROR_MESSAGE"
                                                value="Failed to extract DID from response" />
                                            <property name="RAW_RESPONSE"
                                                expression="$ctx:insertResponse" />
                                        </log>
                                    </else>
                                </filter>

                            </then>
                            <else>

                            </else>
                        </filter>
                    </sequence>
                </target>
            </iterate>

            <payloadFactory media-type="json" template-type="default">
                <format>{
                    "policy_holder": { "first_name": "${vars.FIRST_NAME}", "last_name":
                    "${vars.LAST_NAME}", "date_of_birth": "${vars.DOB}", "gender":
                    "${properties.synapse.gender}", "contact_info": { "email": "${vars.EMAIL}",
                    "phone": "${vars.MOBILE}", "address": { "street":
                    "${properties.synapse.street}", "city": "${properties.synapse.city}", "state":
                    "${properties.synapse.state}", "zip_code": "${properties.synapse.zip_code}",
                    "country": "${properties.synapse.country}" } } }, "policy_details": {
                    "policy_type": "${vars.currentPolicyId}", "primary_coverage_amount":
                    ${properties.synapse.primary_coverage_amount}, "premium_amount":
                    ${properties.synapse.premium_amount}, "start_date":
                    "${properties.synapse.start_date}", "end_date":
                    "${properties.synapse.end_date}", "payment_frequency":
                    "${properties.synapse.payment_frequency}" }, "beneficiaries": [ { "first_name":
                    "${properties.synapse.b_firstname}", "last_name":
                    "${properties.synapse.b_lastname}", "date_of_birth":
                    "${properties.synapse.b_date_of_birth}", "relationship": "Spouse",
                    "percentage_share": ${properties.synapse.b_percentage_share} } ],
                    "payment_info": { "payment_method": "${vars.PAYMENT_METHOD}", "card_number":
                    "${properties.synapse.card_number}", "card_expiry_date":
                    "${properties.synapse.card_exp_date}", "card_cvv":
                    "${properties.synapse.card_cvv}" } }</format>
            </payloadFactory>


            <header name="x-api-key" expression="wso2:vault-lookup('x-api-key')" scope="transport" />

            <call>
                <endpoint key="InsurancePolicyCreationEndpoint" />
            </call>
            <property name="HTTP_STATUS" expression="$axis2:HTTP_SC" scope="default" type="STRING" />
            <filter xpath="$ctx:HTTP_STATUS != '200'">
                <then>
                    <payloadFactory media-type="json">
                        <format>{"ResponseHeader":
                            {"Status": "Error", "RequestId": "$1", "ErrorMessage": "Insurance Policy
                            Creation API failed with status: $2"}}</format>
                        <args>
                            <arg expression="$ctx:RequestId" evaluator="xml" />
                            <arg expression="$ctx:HTTP_STATUS" evaluator="xml" />
                        </args>
                    </payloadFactory>
                    <property name="HTTP_SC" value="500" scope="axis2" />
                    <respond />
                </then>
                <else>
                    <property name="mockResponse" expression="json-eval($)" scope="default" />
                </else>
            </filter>

            <property name="POLICY_ID" expression="json-eval($.policy_id)" scope="default"
                type="STRING" />
            <property name="PolicyHolder" expression="json-eval($.policy_holder)" scope="default"
                type="STRING" />
            <property name="PolicyDetails" expression="json-eval($.policy_details)" scope="default"
                type="STRING" />
            <property name="Beneficiaries" expression="json-eval($.beneficiaries)" scope="default"
                type="STRING" />
            <property name="PaymentInfo" expression="json-eval($.payment_info)" scope="default"
                type="STRING" />
            <property name="EMAIL" expression="$ctx:EMAIL" scope="default" type="STRING" />
            <property name="DID" expression="get-property('operation','DID')
" scope="default"
                type="STRING" />
            <property name="CURRENT_TIMESTAMP" expression="get-property('SYSTEM_DATE')"
                scope="default" type="STRING" />


            <payloadFactory media-type="json">
                <format>{"MESSAGE_TYPE": "POLICY_ID_UPDATE", "POLICY_ID":
                    "$1", "DID": "$2", "UPDATED_AT": "$4"}</format>
                <args>
                    <arg evaluator="xml" expression="$ctx:POLICY_ID" />
                    <arg evaluator="xml" expression="$ctx:DID" />
                    <arg evaluator="xml" expression="$ctx:EMAIL" />
                    <arg evaluator="xml" expression="$ctx:CURRENT_TIMESTAMP" />
                </args>
            </payloadFactory>

            <store messageStore="INS_DSS_QUEUE" sequence="MessageRouterSequence" />
            <property name="HTTP_SC" value="201" scope="axis2" />

            <payloadFactory media-type="json" template-type="default">
    <format>{
        "ResponseHeader": {
            "status": "ok",
            "RequestId": "${properties.synapse.RequestId}"
        },
        "ResponseBody": {
            "PolicyId": "${properties.synapse.POLICY_ID}",
            "PolicyHolder": ${properties.synapse.PolicyHolder},
            "PolicyDetails": ${properties.synapse.PolicyDetails},
            "Beneficiaries": ${properties.synapse.Beneficiaries},
            "PaymentInfo": ${properties.synapse.PaymentInfo},
            "status": "PENDING_APPROVAL",
            "CreatedDate": "${properties.synapse.CURRENT_TIMESTAMP}"
        }
    }</format>
</payloadFactory>

            <respond />
        </inSequence>
        <faultSequence>

            <payloadFactory media-type="json">
                <format>{"ResponseHeader":
                    {"Status": "Error", "RequestId": "$1", "ErrorMessage": "$2"}}</format>
                <args>
                    <arg expression="$ctx:RequestId" evaluator="xml" />
                    <arg expression="$ctx:ERROR_MESSAGE" evaluator="xml" />
                </args>
            </payloadFactory>
            <property name="HTTP_SC" value="500" scope="axis2" />
            <respond />
        </faultSequence>
    </resource>
</api>